// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  uid              String       @unique
  email            String
  photo            String?
  provider         String
  commentReports   Comment[]    @relation("commentReports")
  houseReports     HouseAd[]    @relation("houseReports")
  roommateReports  RoommateAd[] @relation("roommateReports")
  commentLikes     Comment[]    @relation("commentLikes")
  roommateAds      RoommateAd[] @relation("postedRoommateAds")
  savedRoommateAds RoommateAd[] @relation("savedRoommateAds")
  houseAds         HouseAd[]    @relation("postedHouseAds")
  savedHouseAds    HouseAd[]    @relation("savedHouseAds")
  comments         Comment[]    @relation("comments")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([email, provider])
}

enum Duration {
  temporary
  permanent
}

enum PostType {
  house
  roommate
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uid        String
  postId     String
  postType   PostType
  comment    String
  likes      String[]
  reports    String[]
  user       User     @relation(fields: [uid], references: [uid], name: "comments")
  reportedBy User     @relation(fields: [reports], references: [uid], name: "commentReports")
  likedBy    User     @relation(fields: [likes], references: [uid], name: "commentLikes")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

type HouseAddress {
  address1 String?
  city     String
  state    String
  zip      String
}

type RoommateAddress {
  city  String
  state String
}

model RoommateAd {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     RoommateAddress
  budget      Int
  duration    Duration        @default(temporary)
  postedBy    String
  savedBy     String[]
  showEmail   Boolean
  reports     String[]
  moveIn      DateTime
  reportedBy  User            @relation(fields: [reports], references: [uid], name: "roommateReports")
  poster      User            @relation(fields: [postedBy], references: [uid], name: "postedRoommateAds")
  saver       User            @relation(fields: [savedBy], references: [uid], name: "savedRoommateAds")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

type Gallery {
  type String
  name String
  url  String
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId   String
  sender      String
  receiver    String
  attachments String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HouseAd {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     HouseAddress
  gallery     Gallery[]
  price       Int
  duration    Duration     @default(temporary)
  postedBy    String
  savedBy     String[]
  showEmail   Boolean
  reports     String[]
  available   DateTime
  reportedBy  User         @relation(fields: [reports], references: [uid], name: "houseReports")
  poster      User         @relation(fields: [postedBy], references: [uid], name: "postedHouseAds")
  saver       User         @relation(fields: [savedBy], references: [uid], name: "savedHouseAds")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
