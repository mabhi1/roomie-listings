// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  uid              String       @unique
  email            String
  phone            String?
  photo            String?
  provider         String
  commentReports   Comment[]    @relation("commentReports")
  roomReports      RoomAd[]     @relation("roomReports")
  roommateReports  RoommateAd[] @relation("roommateReports")
  commentLikes     Comment[]    @relation("commentLikes")
  roommateAds      RoommateAd[] @relation("postedRoommateAds")
  savedRoommateAds RoommateAd[] @relation("savedRoommateAds")
  roomAds          RoomAd[]     @relation("postedroomAds")
  savedroomAds     RoomAd[]     @relation("savedroomAds")
  comments         Comment[]    @relation("comments")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([email, provider])
}

enum Stay {
  temporary
  permanent
}

enum PostType {
  room
  roommate
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uid        String
  postId     String
  postType   PostType
  comment    String
  likes      String[]
  reports    String[]
  user       User     @relation(fields: [uid], references: [uid], name: "comments")
  reportedBy User     @relation(fields: [reports], references: [uid], name: "commentReports")
  likedBy    User     @relation(fields: [likes], references: [uid], name: "commentLikes")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

type RoomAddress {
  address1 String?
  city     String
  state    String
  zip      String
}

type RoommateAddress {
  city  String
  state String
}

model RoommateAd {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     RoommateAddress
  budget      Int
  stay        Stay            @default(temporary)
  postedBy    String
  savedBy     String[]
  showEmail   Boolean
  showPhone   Boolean
  reports     String[]
  moveIn      DateTime
  reportedBy  User            @relation(fields: [reports], references: [uid], name: "roommateReports")
  poster      User            @relation(fields: [postedBy], references: [uid], name: "postedRoommateAds")
  saver       User            @relation(fields: [savedBy], references: [uid], name: "savedRoommateAds")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

type Gallery {
  type String
  name String
  url  String
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId   String
  sender      String
  receiver    String
  attachments String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoomAd {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  address     RoomAddress
  gallery     Gallery[]
  rent        Int
  stay        Stay        @default(temporary)
  postedBy    String
  savedBy     String[]
  showEmail   Boolean
  showPhone   Boolean
  reports     String[]
  moveIn      DateTime
  reportedBy  User        @relation(fields: [reports], references: [uid], name: "roomReports")
  poster      User        @relation(fields: [postedBy], references: [uid], name: "postedroomAds")
  saver       User        @relation(fields: [savedBy], references: [uid], name: "savedroomAds")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
